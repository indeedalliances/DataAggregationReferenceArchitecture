Parameters:
  AggregatorInstanceType:
    Description: EC2 instance type for the Aggregation Server
    Type: String
    Default: t2.nano
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - m5.large  
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.12xlarge
      - m5.24xlarge
  FTPInstanceType:
    Description: EC2 instance type for the FTP Server
    Type: String
    Default: t2.nano
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - m5.large  
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.12xlarge
      - m5.24xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  SSHKeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances.
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  SSHIngressCIDR:
    Description: IP range allowed to access instances on port 22.
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  HTTPIngressCIDR:
    Description: IP range allowed to access Aggregation Server on port 8080.
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  FTPIngressCIDR:
    Description: IP range allowed to access the FTP server on ports 20-21, 10090-10100.
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  S3CodeBucket:
    Description: S3 bucket containing code and configuration files for the EC2 instances.
    Type: String
  MyVPC:
    Description: VPC to operate in
    Type: AWS::EC2::VPC::Id
  Subnets:
    Type : List<AWS::EC2::Subnet::Id>
    Description: The Subnet Ids for ALL Availability Zones within the VPC. If in doubt, select all of them.
  FTPUserName:
    Type: String
    Description: The username to be created for the ftp account
  FTPPassword:
    Type: String
    Description: The password for the ftp account

Conditions:
  hasThreeAZs: !Or [
      !Equals [!Ref "AWS::Region", "us-east-2"],
      !Equals [!Ref "AWS::Region", "us-west-1"],
      !Equals [!Ref "AWS::Region", "us-west-2"],
      !Equals [!Ref "AWS::Region", "ap-southeast-1"],
      !Equals [!Ref "AWS::Region", "ap-southeast-2"],
      !Equals [!Ref "AWS::Region", "eu-central-1"],
      !Equals [!Ref "AWS::Region", "eu-west-1"],
      !Equals [!Ref "AWS::Region", "eu-west-2"],
      !Equals [!Ref "AWS::Region", "eu-west-3"]]
  hasFourAZs: !Equals [!Ref "AWS::Region", "ap-northeast-1"]
  hasSixAZs: !Equals [!Ref "AWS::Region", "us-east-1"]

Mappings:
  AWSRegion2AMI:
    us-east-1:
      HVM64: ami-14c5486b
    us-east-2:
      HVM64: ami-922914f7
    us-west-1:
      HVM64: ami-25110f45
    us-west-2:
      HVM64: ami-a9d09ed1
    ap-south-1:
      HVM64: ami-76d6f519
    ap-northeast-2:
      HVM64: ami-c10fa6af
    ap-southeast-1:
      HVM64: ami-de90a5a2
    ap-southeast-2:
      HVM64: ami-423bec20
    ap-northeast-1:
      HVM64: ami-92df37ed
    ca-central-1:
      HVM64: ami-338a0a57
    eu-central-1:
      HVM64: ami-9a91b371
    eu-west-1:
      HVM64: ami-ca0135b3
    eu-west-2:
      HVM64: ami-a36f8dc4
    eu-west-3:
      HVM64: ami-969c2deb
    sa-east-1:
      HVM64: ami-3885d854

Resources:
  AggEIP:
    Type: AWS::EC2::EIP
  FTPEIP:
    Type: AWS::EC2::EIP
  Ec2Role: 
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - 
            Effect: Allow
            Principal: 
              Service: 
                - ec2.amazonaws.com
            Action: 
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonEC2FullAccess
          - arn:aws:iam::aws:policy/AmazonS3FullAccess
          - arn:aws:iam::aws:policy/AmazonSESFullAccess
  Ec2Profile: 
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Path: "/"
      Roles: 
        - Ref: Ec2Role
  EFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable EFS access
      VpcId: !Ref MyVPC
  EFSIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: EFSSecurityGroup
    Properties:
      GroupId: !GetAtt EFSSecurityGroup.GroupId
      IpProtocol: -1
      FromPort: 0
      ToPort: 0
      SourceSecurityGroupId: !Ref EFSSecurityGroup
  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref MyVPC
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - CidrIp:
          Ref: SSHIngressCIDR
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22
  FTPSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref MyVPC
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - CidrIp:
          Ref: FTPIngressCIDR
        FromPort: 20
        IpProtocol: tcp
        ToPort: 21
      - CidrIp:
          Ref: FTPIngressCIDR
        FromPort: 10090
        IpProtocol: tcp
        ToPort: 10100
      - CidrIp:
          !Join
            - ""
            - - !Sub ${AggEIP}
              - /32
        FromPort: 0
        IpProtocol: tcp
        ToPort: 65535
      - CidrIp:
          !Join
            - ""
            - - !Sub ${FTPEIP}
              - /32
        FromPort: 0
        IpProtocol: tcp
        ToPort: 65535
  AGGSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref MyVPC
      GroupDescription: Enable HTTP access via port 8080
      SecurityGroupIngress:
      - CidrIp:
          Ref: HTTPIngressCIDR
        FromPort: 8080
        IpProtocol: tcp
        ToPort: 8080
      - CidrIp:
          !Join
            - ""
            - - !Sub ${FTPEIP}
              - /32
        FromPort: 0
        IpProtocol: tcp
        ToPort: 65535
      - CidrIp:
          !Join
            - ""
            - - !Sub ${AggEIP}
              - /32
        FromPort: 0
        IpProtocol: tcp
        ToPort: 65535
  DataStore:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: true
      FileSystemTags:
        - Key: Name
          Value: Aggregation Data Store
  EFSMountTarget0:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId:
        Ref: DataStore
      SecurityGroups:
        - !Ref EFSSecurityGroup
      SubnetId: !Select [ 0, !Ref Subnets ]
  EFSMountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId:
        Ref: DataStore
      SecurityGroups:
        - !Ref EFSSecurityGroup
      SubnetId: !Select [ 1, !Ref Subnets ]
  EFSMountTarget2:
    Type: AWS::EFS::MountTarget
    Condition: hasThreeAZs
    Properties:
      FileSystemId:
        Ref: DataStore
      SecurityGroups:
        - !Ref EFSSecurityGroup
      SubnetId: !Select [ 2, !Ref Subnets ]
  EFSMountTarget3:
    Type: AWS::EFS::MountTarget
    Condition: hasFourAZs
    Properties:
      FileSystemId:
        Ref: DataStore
      SecurityGroups:
        - !Ref EFSSecurityGroup
      SubnetId: !Select [ 3, !Ref Subnets ]
  EFSMountTarget4:
    Type: AWS::EFS::MountTarget
    Condition: hasSixAZs
    Properties:
      FileSystemId:
        Ref: DataStore
      SecurityGroups:
        - !Ref EFSSecurityGroup
      SubnetId: !Select [ 4, !Ref Subnets ]
  EFSMountTarget5:
    Type: AWS::EFS::MountTarget
    Condition: hasSixAZs
    Properties:
      FileSystemId:
        Ref: DataStore
      SecurityGroups:
        - !Ref EFSSecurityGroup
      SubnetId: !Select [ 5, !Ref Subnets ]
  AggLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      EbsOptimized: false
      IamInstanceProfile: !Ref Ec2Profile
      ImageId: !FindInMap [ AWSRegion2AMI, !Ref "AWS::Region", HVM64 ]
      InstanceMonitoring: false
      InstanceType: !Ref AggregatorInstanceType
      KeyName: !Ref SSHKeyName
      LaunchConfigurationName: AggLaunchConfig
      SecurityGroups:
        - !Ref SSHSecurityGroup
        - !Ref EFSSecurityGroup
        - !Ref AGGSecurityGroup
      UserData:
        Fn::Base64:
          !Join
            - ""
            - - "#!/bin/bash -xe\n"
              - "sudo yum -y update\n"
              - "sudo yum install -y amazon-efs-utils\n"
              - "# mount efs\n"
              - "sudo mkdir /mnt/efs\n"
              - "sudo mount -t efs -o tls "
              - !Ref DataStore
              - ":/ /mnt/efs\n"
              - "sudo chown ec2-user /mnt/efs\n"
              - "sudo chgrp ec2-user /mnt/efs\n"
              - "touch /mnt/efs/aggtouch.txt\n"
              - "#install python requirements\n"
              - "aws s3 cp s3://"
              - !Sub ${S3CodeBucket}
              - "/python_requirements.txt /home/ec2-user/python_requirements.txt\n"
              - "sudo pip install -r /home/ec2-user/python_requirements.txt\n"
              - "aws s3 cp s3://"
              - !Sub ${S3CodeBucket}
              - "/prettyprint.py /home/ec2-user/prettyprint.py\n"
              - "sudo chmod +x /home/ec2-user/prettyprint.py\n"
              - "sudo chown ec2-user /home/ec2-user/prettyprint.py\n"
              - "sudo chgrp ec2-user /home/ec2-user/prettyprint.py\n"
              - "#get API configs\n"
              - "aws s3 cp s3://"
              - !Sub ${S3CodeBucket}
              - "/api_configs.json /home/ec2-user/api_configs.json\n"
              - "sudo chown ec2-user /home/ec2-user/api_configs.json\n"
              - "sudo chgrp ec2-user /home/ec2-user/api_configs.json\n"
              - "#get health checks\n"
              - "aws s3 cp s3://"
              - !Sub ${S3CodeBucket}
              - "/HealthChecks.jar /home/ec2-user/HealthChecks.jar\n"
              - "sudo chown ec2-user /home/ec2-user/HealthChecks.jar\n"
              - "sudo chgrp ec2-user /home/ec2-user/HealthChecks.jar\n"
              - "#get job initiator\n"
              - "aws s3 cp s3://"
              - !Sub ${S3CodeBucket}
              - "/JobInitiator.jar /home/ec2-user/JobInitiator.jar\n"
              - "sudo chown ec2-user /home/ec2-user/JobInitiator.jar\n"
              - "sudo chgrp ec2-user /home/ec2-user/JobInitiator.jar\n"
              - "# preserve file count\n"
              - "sudo echo export preserve_file_count='40' >> /etc/profile\n"
              - "# get elastic ip address\n"
              - "INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)\n"
              - "aws configure set region "
              - !Ref AWS::Region
              - "\n"
              - "aws ec2 associate-address --instance-id $INSTANCE_ID --allocation-id "
              - !GetAtt AggEIP.AllocationId
              - " --allow-reassociation\n"
              - "#install java 8\n"
              - "sudo yum -y install java-1.8.0-openjdk.x86_64\n"
              - "#copy server code from S3 bucket\n"
              - "aws s3 cp s3://"
              - !Sub ${S3CodeBucket}
              - "/AggregationServer.jar /home/ec2-user/AggregationServer.jar\n"
              - "sudo chown ec2-user /home/ec2-user/AggregationServer.jar\n"
              - "sudo chgrp ec2-user /home/ec2-user/AggregationServer.jar\n"
              - "#start server\n"
              - "sudo runuser -l  ec2-user -c '/usr/bin/java8 -jar /home/ec2-user/AggregationServer.jar &'\n"
              - "#create cron jobs for the two health checks\n"
              - "echo \\*/10 \\* \\* \\* \\* ec2-user \\(/usr/bin/java8 -cp /home/ec2-user/HealthChecks.jar HttpHealthCheck http://"
              - !Ref AggEIP
              - ":8080/HealthCheck 15000 \\> /home/ec2-user/jobhealth.out\\) >> mycron\n"
              - "echo 5-59/10 \\* \\* \\* \\* ec2-user \\(/usr/bin/java8 -cp /home/ec2-user/HealthChecks.jar FtpHealthCheck "
              - !Ref FTPEIP
              - " 21 "
              - !Sub ${FTPUserName}
              - " "
              - !Sub ${FTPPassword}
              - " "
              - "15000 2 \\> /home/ec2-user/ftphealth.out\\) >> mycron\n"
              - "echo 0 0,2,4,6,8,10,12,14,16,18,20,22 \\* \\* \\* ec2-user \\(/usr/bin/java8 -cp /home/ec2-user/JobInitiator.jar JobInitiator http://"
              - !Ref AggEIP
              - ":8080/GetJobs 3000 \\> /home/ec2-user/getjobs.out\\) >> mycron\n"
              - "sudo mv mycron /etc/cron.d/\n"
  AggASG:  
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      Tags:
        - Key: Name
          Value: AggAutoScaled
          PropagateAtLaunch: true
      AvailabilityZones: !GetAZs ''
      LaunchConfigurationName: !Ref AggLaunchConfig
      MinSize: 1
      MaxSize: 1
  FTPLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      EbsOptimized: false
      IamInstanceProfile: !Ref Ec2Profile
      ImageId: !FindInMap [ AWSRegion2AMI, !Ref "AWS::Region", HVM64 ]
      InstanceMonitoring: false
      InstanceType: !Ref FTPInstanceType
      KeyName: !Ref SSHKeyName
      LaunchConfigurationName: FTPLaunchConfig
      SecurityGroups:
        - !Ref SSHSecurityGroup
        - !Ref EFSSecurityGroup
        - !Ref FTPSecurityGroup
      UserData:
        Fn::Base64:
          !Join
            - ""
            - - "#!/bin/bash -xe\n"
              - "sudo yum -y update\n"
              - "sudo yum install -y amazon-efs-utils\n"
              - "# mount efs\n"
              - "sudo mkdir /mnt/efs\n"
              - "sudo mount -t efs -o tls "
              - !Ref DataStore
              - ":/ /mnt/efs\n"
              - "sudo chown ec2-user /mnt/efs\n"
              - "sudo chgrp ec2-user /mnt/efs\n"
              - "touch /mnt/efs/ftptouch.txt\n"
              - "#install java 8\n"
              - "sudo yum -y install java-1.8.0-openjdk.x86_64\n"
              - "# get health checks\n"
              - "aws s3 cp s3://"
              - !Sub ${S3CodeBucket}
              - "/HealthChecks.jar /home/ec2-user/HealthChecks.jar\n"
              - "sudo chown ec2-user /home/ec2-user/HealthChecks.jar\n"
              - "sudo chgrp ec2-user /home/ec2-user/HealthChecks.jar\n"
              - "aws s3 cp s3://"
              - !Sub ${S3CodeBucket}
              - "/JobInitiator.jar /home/ec2-user/JobInitiator.jar\n"
              - "sudo chown ec2-user /home/ec2-user/JobInitiator.jar\n"
              - "sudo chgrp ec2-user /home/ec2-user/JobInitiator.jar\n"
              - "# get elastic ip address\n"
              - "INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)\n"
              - "aws configure set region "
              - !Ref AWS::Region
              - "\n"
              - "aws ec2 associate-address --instance-id $INSTANCE_ID --allocation-id "
              - !GetAtt FTPEIP.AllocationId
              - " --allow-reassociation\n"
              - "# install vsftpd\n"
              - "sudo yum -y install ftp\n"
              - "sudo yum -y install vsftpd\n"
              - "# config vsftpd\n"
              - "aws s3 cp s3://"
              - !Sub ${S3CodeBucket}
              - "/vsftpd.conf /etc/vsftpd/vsftpd.conf\n"
              - "# add ftpuser and set its home directory as /mnt/efs\n"
              - "sudo useradd -d /mnt/efs/ -s /sbin/nologin "
              - !Sub ${FTPUserName}
              - "\n"
              - "echo "
              - !Sub ${FTPUserName}
              - ":"
              - !Sub ${FTPPassword}
              - " | sudo /usr/sbin/chpasswd\n"
              - "# start ftp service\n"
              - "sudo /sbin/service vsftpd start\n"
              - "# create cron jobs for the two health checks\n"
              - "echo 5-59/10 \\* \\* \\* \\* ec2-user \\(/usr/bin/java8 -cp /home/ec2-user/HealthChecks.jar HttpHealthCheck http://"
              - !Ref AggEIP
              - ":8080/HealthCheck 15000 \\> /home/ec2-user/jobhealth.out\\) >> mycron\n"
              - "echo \\*/10 \\* \\* \\* \\* ec2-user \\(/usr/bin/java8 -cp /home/ec2-user/HealthChecks.jar FtpHealthCheck "
              - !Ref FTPEIP
              - " 21 "
              - !Sub ${FTPUserName}
              - " "
              - !Sub ${FTPPassword}
              - " "
              - "15000 2 \\> /home/ec2-user/ftphealth.out\\) >> mycron\n"
              - "echo 0 1,3,5,7,9,11,13,15,17,19,21,23 \\* \\* \\* ec2-user \\(/usr/bin/java8 -cp /home/ec2-user/JobInitiator.jar JobInitiator http://"
              - !Ref AggEIP
              - ":8080/GetJobs 3000 \\> /home/ec2-user/getjobs.out\\) >> mycron\n"
              - "sudo mv mycron /etc/cron.d/\n"
  FTPASG:  
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      Tags:
        - Key: Name
          Value: FTPAutoScaled
          PropagateAtLaunch: true
      AvailabilityZones: !GetAZs ''
      LaunchConfigurationName: !Ref FTPLaunchConfig
      MinSize: 1
      MaxSize: 1

Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      -
        Label:
          default: Network Configuration
        Parameters:
          - MyVPC
          - Subnets
          - HTTPIngressCIDR
          - SSHIngressCIDR
          - FTPIngressCIDR
      - 
        Label: 
          default: EC2 Configuration
        Parameters:
          - S3CodeBucket
          - AggregatorInstanceType
          - FTPInstanceType
          - SSHKeyName
      -
        Label:
          default: FTP User Setup
        Parameters:
          - FTPUserName
          - FTPPassword

    ParameterLabels: 
      S3CodeBucket: 
        default: S3 Resource Bucket
      AggregatorInstanceType:
        default: Aggregator instance type
      FTPInstanceType:
        default: FTP instance type
      SSHKeyName:
        default: KeyPair for SSH access
      SSHIngressCIDR:
        default: SSH access
      HTTPIngressCIDR:
        default: HTTP access
      FTPIngressCIDR:
        default: FTP access
      FTPUserName:
        default: Name of FTP user to be created
      FTPPassword:
        default: Password of FTP user to be created

Outputs:
  ftpaddress:
    Description: FTP server IP address
    Value: !Ref FTPEIP
  aggaddress:
    Description: Aggregation server IP address
    Value: !Ref AggEIP
  ftpuser:
    Description: FTP user name
    Value: !Ref FTPUserName
  ftppassword:
    Description: FTP password
    Value: !Ref FTPPassword


